log4j配置详解

一、log4j.rootLogger=INFO, stdout, R
● 第一个参数为等级，后面可跟一到多个参数，为输出的位置；
● 例句的意思为将等级为INFO的日志信息使用stdout和R进行输出，stdout和R可以自己命名；
● 等级可分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL，OFF是关闭，不输出任何信息，其他级别按这个顺序依次降低，如果 指定一个级别，如INFO，则比该级别高的信息都会输出，此时会输出FATAL、ERROR、WARN、INFO级别的信息。
二、log4j.appender.stdout=org.apache.log4j.ConsoleAppender
   log4j.appender.stdout.option=value
● 此处的stdout要与第1条中出现的名称对应，后面出现这个名称的地方都需如此，不再复述；
● 定义stdout的输出端类型，以及属性选项配置，可以有下面几种类型：
   org.apache.log4j.ConsoleAppender（输出在控制台）
   org.apache.log4j.FileAppender（输出到文件）
   org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
   org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），可通过       log4j.appender.R.MaxFileSize=100KB设置文件大小，还可通过 log4j.appender.R.MaxBackupIndex=1设置为保存一个备份文件
org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
● 关于log4j.appender.stdout.option=value属性选项配置，此处option与value可以为以下指定的内容：
○ 输出端共同选项：
Threshold=WARN:指定日志消息的输出最低层次。
ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
○ ConsoleAppender选项：
Target=System.err：默认情况下是：System.out,指定输出控制台
○ 文件输出端共同选项：
File=mylog.txt:指定消息输出到mylog.txt文件。
Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
○ DailyRollingFileAppender 选项：
DatePattern=yyyy-ww:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下：
   1)yyyy-MM: 每月
   2)yyyy-ww: 每周
   3)yyyy-MM-dd: 每天
   4)yyyy-MM-dd-a: 每天两次
   5)yyyy-MM-dd-HH: 每小时
   6)yyyy-MM-dd-HH-mm: 每分钟
○ RollingFileAppender 选项：
   MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
   MaxBackupIndex=2:指定可以产生的滚动文件的最大数。
○ 根据上面的说明，给出的样例配置：
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
log4j.appender.R.File=D:\\logs\\APPName.log
此处R与stdout类似，要与第1条中出现的名称对应
定义R的输出端为输出到文件，并且文件大小到达指定尺寸的时候产生一个新的文件
定义R的输出端的文件名为D:\\logs\\APPName.log，该路径与名称可以自行修改。
三、log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
   定义stdout的输出端layout，layout可以有下面几种类型：
   org.apache.log4j.HTMLLayout（以HTML表格形式布局），
   org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
   org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
   org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
四、log4j.appender.stdout.layout.ConversionPattern= [APPName] %p [%t] %C.%M(%L) | %m%n
● 如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern，具体参数：
   %m 输出代码中指定的消息
   %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
   %r 输出自应用启动到输出该log信息耗费的毫秒数
   %c 输出所属的类目，通常就是所在类的全名
   %t 输出产生该日志事件的线程名
   %n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”
   %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921 %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
   %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
   %%: 输出一个”%”字符
   %F: 输出日志消息产生时所在的文件名称
   %M: 输出执行方法
   %L: 输出代码中的行号
● 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
   1) c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
   2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，”-”号指定左对齐。
   3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
   4) .30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。
   [APPName]是log信息的开头，可以为任意字符，一般为项目简称。
五、log4j.logger.com.johnny=DEBUG
自定义各个包中日志级别，指定com.johnny包下的所有类的等级为DEBUG。
六、加载自己的配置文件：
log4j默认加载类路径下的log4j.properties文件，如果自定义其他名称的properties文件的时候，就需要使用PropertyConfigurator.configure(“FilePath”)来加载配置文件，这里要注意一下配置文件的路径：
针对java项目：
   绝对路径 --  F:\\test\\log4jSelf.properties;
   这个就不用多说了，如果不是web项目的话，写绝对路径那就是硬盘上的全路径了
   相对路径 --  src/youFileName.properties
   log4j默认的当前路径工程下面，即跟src同级目录，了解这点相信相对路径大家都手到擒来了，或者类加载器获得路径也可以；
针对web项目：
    getRealPath获得路径加上文件名